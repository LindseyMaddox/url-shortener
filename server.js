//if not a valid url, json will say error {"error":"This url is not on the database."}
//when you enter (OR CLICK ON) your shortened url, it will redirect to original site

//data model
//url_shortener_map
//columns: id, url, short_hash
//insert if doesn't exist
//shortened_url generated by root url + short_hash
//shortened_url must be unique

var express = require('express');
var app = express();
const bodyParser= require('body-parser');
app.use(bodyParser.urlencoded({extended: true}));
const MongoClient = require('mongodb').MongoClient;

var mongoUrl = "mongodb://llmaddox:herokumary4git@ds133328.mlab.com:33328/shorten-your-url"
MongoClient.connect(mongoUrl, (err, db) => {
  if (err) throw err;
  var db = db;
    // set the port of our application
  // process.env.PORT lets the port be set by Heroku
  //only listen when 
  var port = process.env.PORT || 8080;
  
  app.listen(port, function () {
    console.log('listening on' + port);
  });
  
  app.get('/', function(req, res){
    res.sendFile("index.html", {"root": __dirname});
  });
  
  app.get('/new/:site*', function(req, res){
    var fullUrlRequested = req.params.site + req.params[0];
    var validUrlTest = /https?:\/\/(www\.)?[\w\/\-\.\%\:\+\~\#\=\?]+/;
    var validSite = validUrlTest.test(fullUrlRequested);
   if(validSite){
     console.log(fullUrlRequested + " is a valid site");
     var parentURL = req.url;
     var obtained = false;
    // while(obtained == false){ 
    //   console.log("obtained is: " + obtained);
    //   obtained = checkIfURLinDB(fullUrlRequested);
    // }
    checkIfURLinDB(fullUrlRequested);
     //once obtained is not false;
     var shortURL = getShortenedHash(fullUrlRequested);
     var data = { "original url": fullUrlRequested, "shortened url": shortURL };
   } else {
     var data = { "error":"Wrong url format. Please check your url again." };
   }

 res.send(JSON.stringify(data, null, 2));

    });
      function checkIfURLinDB(requested){
      //check to see if we already have a record for that request
      //AND check to see if there is a shortened url
      var status = false;
      var shortHash = getRandomInt(1,1000);

        db.collection('shortener_map').find(  { $or: [ {urlRequest: requested }, {shortHash: shortHash} ] }).toArray(function(err,items){
          if (err) throw err;
          if(items.length == 0){
            console.log("not in DB. adding");
            addURLtoDB(requested, shortHash);
            //status is still false
           } else if(items.urlRequest != null && items.shortHash == null){
             console.log("url exists but no shorthash")
             updateURLShortHashinDB(requested,shortHash);
           } else if(items.shortHash != null && items.urlRequest == null){
             console.log("short hash exists but no url")
             var non_unique_hash = true
             while(non_unique_hash == true){
               var shortHash = getRandomInt(1,1000);
                   db.collection('shortener_map').find(  { shortHash: shortHash }).toArray(function(err,items){
                     if (err) throw err;
                     if(items == null){
                       addURLtoDB(requested, shortHash);
                       non_unique_hash = false;
                     }
                   });
             }
          } else {
            //you've found a match, so move on to the next step
            status = true;
            console.log("match! status is " + status + " and your record is ");
            console.log(items);
          }
          return status;
        });

      console.log("at the end of checkIfURLinDB fx status is " + status); //this happens before the conditional gets finished
     return status;
    }
   
    function getShortenedHash(url){
      db.collection('shortener_map').find( { urlRequest: url }, { shortHash: 1,  _id: 0 }  ).toArray(function(err,results){
          if (err) throw err;
          return results[0];
    });
    }
    
 function addURLtoDB(requested, shortHash){

     db.collection('shortener_map').insert(
       { urlRequest: requested, shortHash: shortHash }, function(err,result){
         if (err) throw err;
         console.log("saved to database");
       });
}

 function updateURLShortHashinDB(requested,shortHash){
     db.collection('shortener_map').update ({ urlRequest: requested },{ $set: { shortHash: shortHash } }, function(err,record){
       if (err) throw err;
       console.log("returning record for update function:" + record);
   });
}

  }); //end of connection

function getRandomInt(min,max){
  return Math.random() * (max - min) + min;

}
